{"ast":null,"code":"var _jsxFileName = \"/Users/mj/Desktop/formeT/src/component/GenreFilter.js\";\nimport React from \"react\";\nimport { styled } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GenreFilter({\n  selectedGenres,\n  onSelectGenres\n}) {\n  const genres = [{\n    id: 28,\n    name: \"Action\"\n  }, {\n    id: 12,\n    name: \"Adventure\"\n  }, {\n    id: 16,\n    name: \"Animation\"\n  }, {\n    id: 35,\n    name: \"Comedy\"\n  }, {\n    id: 80,\n    name: \"Crime\"\n  }, {\n    id: 18,\n    name: \"Drama\"\n  }, {\n    id: 10751,\n    name: \"Family\"\n  }, {\n    id: 14,\n    name: \"Fantasy\"\n  }, {\n    id: 36,\n    name: \"History\"\n  }, {\n    id: 27,\n    name: \"Horror\"\n  }, {\n    id: 10402,\n    name: \"Music\"\n  }, {\n    id: 9648,\n    name: \"Mystery\"\n  }, {\n    id: 10749,\n    name: \"Romance\"\n  }, {\n    id: 878,\n    name: \"Science Fiction\"\n  }, {\n    id: 53,\n    name: \"Thriller\"\n  }];\n  const handleGenreChange = clickedGenre => {\n    onSelectGenres(prevSelectedGenres => {\n      if (prevSelectedGenres.includes(clickedGenre)) {\n        return prevSelectedGenres.filter(genre => genre !== clickedGenre);\n      } else {\n        return [...prevSelectedGenres, clickedGenre];\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GenreWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      className: \"filter_title\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Genres\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GenreLists, {\n      children: genres.map(genre => {\n        console.log(\"Genre:\", genre);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: `genre-${genre.id}`,\n            value: genre.id,\n            checked: selectedGenres.includes(genre.id),\n            onChange: () => handleGenreChange(genre.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: `genre-${genre.id}`,\n            children: genre.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 15\n          }, this)]\n        }, genre.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_c = GenreFilter;\nexport default GenreFilter;\nconst GenreWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\n_c2 = GenreWrapper;\nconst GenreLists = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  min-width: calc(30% - 2px);\n  padding: 2px;\n  height: auto;\n  font-size: 15px;\n\n  label {\n    margin: 10px;\n  }\n`;\n_c3 = GenreLists;\nconst Title = styled.div`\n  h2 {\n    font-size: 18px;\n  }\n`;\n_c4 = Title;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"GenreFilter\");\n$RefreshReg$(_c2, \"GenreWrapper\");\n$RefreshReg$(_c3, \"GenreLists\");\n$RefreshReg$(_c4, \"Title\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","GenreFilter","selectedGenres","onSelectGenres","genres","id","name","handleGenreChange","clickedGenre","prevSelectedGenres","includes","filter","genre","GenreWrapper","children","Title","className","fileName","_jsxFileName","lineNumber","columnNumber","GenreLists","map","console","log","type","value","checked","onChange","htmlFor","_c","div","_c2","_c3","_c4","$RefreshReg$"],"sources":["/Users/mj/Desktop/formeT/src/component/GenreFilter.js"],"sourcesContent":["import React from \"react\";\nimport { styled } from \"styled-components\";\n\nfunction GenreFilter({ selectedGenres, onSelectGenres }) {\n  const genres = [\n    {\n      id: 28,\n      name: \"Action\",\n    },\n    {\n      id: 12,\n      name: \"Adventure\",\n    },\n    {\n      id: 16,\n      name: \"Animation\",\n    },\n    {\n      id: 35,\n      name: \"Comedy\",\n    },\n    {\n      id: 80,\n      name: \"Crime\",\n    },\n\n    {\n      id: 18,\n      name: \"Drama\",\n    },\n    {\n      id: 10751,\n      name: \"Family\",\n    },\n    {\n      id: 14,\n      name: \"Fantasy\",\n    },\n    {\n      id: 36,\n      name: \"History\",\n    },\n    {\n      id: 27,\n      name: \"Horror\",\n    },\n    {\n      id: 10402,\n      name: \"Music\",\n    },\n    {\n      id: 9648,\n      name: \"Mystery\",\n    },\n    {\n      id: 10749,\n      name: \"Romance\",\n    },\n    {\n      id: 878,\n      name: \"Science Fiction\",\n    },\n\n    {\n      id: 53,\n      name: \"Thriller\",\n    },\n  ];\n\n  const handleGenreChange = (clickedGenre) => {\n    onSelectGenres((prevSelectedGenres) => {\n      if (prevSelectedGenres.includes(clickedGenre)) {\n        return prevSelectedGenres.filter((genre) => genre !== clickedGenre);\n      } else {\n        return [...prevSelectedGenres, clickedGenre];\n      }\n    });\n  };\n\n  return (\n    <GenreWrapper>\n      <Title className=\"filter_title\">\n        <h2>Genres</h2>\n      </Title>\n      <GenreLists>\n        {genres.map((genre) => {\n          console.log(\"Genre:\", genre);\n          return (\n            <div key={genre.id}>\n              <input\n                type=\"checkbox\"\n                id={`genre-${genre.id}`}\n                value={genre.id}\n                checked={selectedGenres.includes(genre.id)}\n                onChange={() => handleGenreChange(genre.id)}\n              />\n              <label htmlFor={`genre-${genre.id}`}>{genre.name}</label>\n            </div>\n          );\n        })}\n      </GenreLists>\n    </GenreWrapper>\n  );\n}\n\nexport default GenreFilter;\n\nconst GenreWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n`;\nconst GenreLists = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  min-width: calc(30% - 2px);\n  padding: 2px;\n  height: auto;\n  font-size: 15px;\n\n  label {\n    margin: 10px;\n  }\n`;\n\nconst Title = styled.div`\n  h2 {\n    font-size: 18px;\n  }\n`;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}